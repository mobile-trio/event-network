{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Firebase from \"../../../firebaseConfig\";\nimport * as Notifications from 'expo-notifications';\nimport Constants from 'expo-constants';\nexport function sendNotificationToAllUsers(title, body) {\n  var users;\n  return _regeneratorRuntime.async(function sendNotificationToAllUsers$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Firebase.firestore().collection(\"users\").get());\n\n        case 2:\n          users = _context.sent;\n          users.docs.map(function (user) {\n            return sendPushNotification(user.data().token, title, body);\n          });\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function sendPushNotification(expoPushToken, title, body) {\n  var message;\n  return _regeneratorRuntime.async(function sendPushNotification$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          message = {\n            to: expoPushToken,\n            sound: 'default',\n            title: title,\n            body: body,\n            data: {\n              someData: 'goes here'\n            }\n          };\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/send', {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Accept-encoding': 'gzip, deflate',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(message)\n          }));\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function registerForPushNotificationsAsync() {\n  var token, _await$Notifications$, existingStatus, finalStatus, _await$Notifications$2, status, res;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (!Constants.isDevice) {\n            _context3.next = 21;\n            break;\n          }\n\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(Notifications.getPermissionsAsync());\n\n        case 3:\n          _await$Notifications$ = _context3.sent;\n          existingStatus = _await$Notifications$.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context3.next = 12;\n            break;\n          }\n\n          _context3.next = 9;\n          return _regeneratorRuntime.awrap(Notifications.requestPermissionsAsync());\n\n        case 9:\n          _await$Notifications$2 = _context3.sent;\n          status = _await$Notifications$2.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== 'granted')) {\n            _context3.next = 15;\n            break;\n          }\n\n          alert('Failed to get push token for push notification!');\n          return _context3.abrupt(\"return\");\n\n        case 15:\n          _context3.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context3.sent.data;\n          console.log(token);\n          _context3.next = 22;\n          break;\n\n        case 21:\n          alert('Must use physical device for Push Notifications');\n\n        case 22:\n          if (!token) {\n            _context3.next = 27;\n            break;\n          }\n\n          _context3.next = 25;\n          return _regeneratorRuntime.awrap(Firebase.firestore().collection('users').doc(Firebase.auth().currentUser.uid).set({\n            token: token\n          }, {\n            merge: true\n          }));\n\n        case 25:\n          res = _context3.sent;\n          console.log(res + \"123\");\n\n        case 27:\n          if (Platform.OS === 'android') {\n            Notifications.setNotificationChannelAsync('default', {\n              name: 'default',\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: '#FF231F7C'\n            });\n          }\n\n          return _context3.abrupt(\"return\", token);\n\n        case 29:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["C:/Users/MERTCAN/Desktop/receipes-app/recipes-app-react-native-master/src/components/Notification/Notification.js"],"names":["React","useState","Firebase","Notifications","Constants","sendNotificationToAllUsers","title","body","firestore","collection","get","users","docs","map","user","sendPushNotification","data","token","expoPushToken","message","to","sound","someData","fetch","method","headers","Accept","JSON","stringify","registerForPushNotificationsAsync","isDevice","getPermissionsAsync","existingStatus","status","finalStatus","requestPermissionsAsync","alert","getExpoPushTokenAsync","console","log","doc","auth","currentUser","uid","set","merge","res","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor"],"mappings":"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","sourcesContent":["import React, {useState } from 'react'\r\nimport {View,Button,TextInput} from 'react-native'\r\nimport Firebase from '../../../firebaseConfig';\r\nimport * as Notifications from 'expo-notifications'\r\nimport Constants from 'expo-constants'\r\n\r\n\r\n  export async function sendNotificationToAllUsers (title,body) {\r\n\r\n    const users = await Firebase.firestore().collection(\"users\").get();\r\n    users.docs.map(user => sendPushNotification(user.data().token,title,body))\r\n  }\r\n\r\n  export async function sendPushNotification(expoPushToken,title,body) {\r\n    const message = {\r\n      to: expoPushToken,\r\n      sound: 'default',\r\n      title: title,\r\n      body: body,\r\n      data: { someData: 'goes here' },\r\n    };\r\n  \r\n    await fetch('https://exp.host/--/api/v2/push/send', {\r\n      method: 'POST',\r\n      headers: {\r\n        Accept: 'application/json',\r\n        'Accept-encoding': 'gzip, deflate',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify(message),\r\n    });\r\n  }\r\n\r\n  export async function registerForPushNotificationsAsync() {\r\n    let token;\r\n    if (Constants.isDevice) {\r\n      const { status: existingStatus } = await Notifications.getPermissionsAsync();\r\n      let finalStatus = existingStatus;\r\n      if (existingStatus !== 'granted') {\r\n        const { status } = await Notifications.requestPermissionsAsync();\r\n        finalStatus = status;\r\n      }\r\n      if (finalStatus !== 'granted') {\r\n        alert('Failed to get push token for push notification!');\r\n        return;\r\n      }\r\n      token = (await Notifications.getExpoPushTokenAsync()).data;\r\n      console.log(token);\r\n    } else {\r\n      alert('Must use physical device for Push Notifications');\r\n    }\r\n  \r\n    if(token){\r\n      const res = await Firebase\r\n      .firestore()\r\n      .collection('users')\r\n      .doc(Firebase.auth().currentUser.uid)\r\n      .set({token},{merge:true})\r\n      console.log(res+\"123\")\r\n    }\r\n\r\n\r\n  \r\n    if (Platform.OS === 'android') {\r\n      Notifications.setNotificationChannelAsync('default', {\r\n        name: 'default',\r\n        importance: Notifications.AndroidImportance.MAX,\r\n        vibrationPattern: [0, 250, 250, 250],\r\n        lightColor: '#FF231F7C',\r\n      });\r\n    }\r\n  \r\n    return token;\r\n  }\r\n"]},"metadata":{},"sourceType":"module"}